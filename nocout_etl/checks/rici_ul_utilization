#!/usr/bin/python
import re
import time
"""
Downlink utilizationPoller script.

This is part of device application. 
Poller script determines the port current Downlink utilization in terms of number of octets in downlink direction.
poller script takes the snmp value of OID .1.3.6.1.2.1.2.2.1.16 from snmp agent of device at specific interval.
Total Downlink utilization is sent to device application 

"""
# #######################################################################
# Function : check_rici_ul_utilization
#
# Parameters: info (SNMP otuput ,_no_params (NO parameters))
#
# Output: service state,plugin input and performance data
# #######################################################################


def check_rici_ul_utilization(item, _no_params, info):
    """
                check_rici_ul_utilization function calculates the downlink utilization

                Args:
                        item (str) Specific item on SNMP input on which we want to filter results
                
                Kwargs:
                        params (tuple) Check parameters for critical and warning state of service

                Returns:
                        state (int) :
                                        0 : OK
                                        1 : Warning
                                        2: Critical
                    3: unknown
                        infotext(string):
                                        plugin input
                                        Example : OK - [Management_Port_on_Odu] ul_utilization:2994339289

                        performance_data  (list):
                                        performance data
                                        Example: Management_Port_on_Odu=2994339289;;;; Radio_Interface=;;;;
                        Raises:
                                ValueError ,Exception
    """
    state = 3
    rate = None
    link_in_octets = None
    wrapped = False
    infotext = "unknown_value"
    status_list = []
    port_string = "eth_"
    try:
	if info:
		infotext = "ul_utilization: ["
		check_time = int(time.time())
		infotext += "time=%s" % check_time
        	for index in range(len(info[0][0])):
			link_up = info[0][0][index]
			if link_up:
				link_in_octets = info[1][0][index]
				this_time = int(time.time())
				try:
					timedif, rate = get_counter("rici_ul_utilization %s" % (port_string+str(index+1)), this_time, 
					saveint(link_in_octets))
					rate = (rate * 8)/(1024.0 * 1024)
    					state = 0
				except MKCounterWrapped:
					wrapped=True
                		status_list.append((port_string+str(index+1),"%.2f" % rate))
                		infotext += "count=%s " % (link_in_octets)
		infotext +="]"
		try:
			if memc:
				key = str(g_hostname) + "_ul"
				memc.set(key,str(status_list),300)
		except:
			pass
    except ValueError:
        infotext = "type_mismatch_error"
    except:
	infotext = "unknown_value"
    if wrapped:
        infotext = "Counter wrapped"
    return (state, infotext, status_list)


check_info["rici_ul_utilization"] = {
    'check_function': check_rici_ul_utilization,
    'service_description': 'rici_ul_utilization',
    'has_perfdata': True,
}

##############################################################################
#SNMP OID for the Downlink utilization
##############################################################################


snmp_info["rici_ul_utilization"] = [( ".1.3.6.1.2.1.2.2.1",["8.21","8.22","8.23","8.24","8.25","8.26","8.27","8.28"]),
                                   ( ".1.3.6.1.2.1.2.2.1", ["10.21","10.22","10.23","10.24","10.25","10.26","10.27","10.28"] )]
