#!/usr/bin/python
import time
import binascii
"""
Poller script which runs on ss and calculates the downlink utilization for the ss from the connected BS

Poller script determines the downlink utilization for the connected ss from BS
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.4.1.21 from snmp agent of device at specific interval.
downlink utilization information is sent to device application 

"""
# ##################################################################
# Function : check_cambium_ss_dl_utilization
#
#  Parameters: info(SNMP output) ,params(parameters to check the service state) 
#
#  Output: service state,plugin output ,performance data
##################################################################


def check_cambium_ss_dl_utilization(item, _no_params, info):
    """
        Check_cambium_ss_dl_utilization function calcaulates the downlink utilization for the connected ss from bs

        Args:
            item (str) Specific item on SNMP output on which we want to filter results

        Kwargs:
            params (tuple) Check parameters for critical and warning state of service

        Returns:
            state (int) :
                    0: OK
                    1: Warning
                    2: Critical
                    3: unknown
            infotext(string):
                    plugin output
                    Example : Device received signal strength indication is -76

            performance_data  (list):
                    performance data
                    Example: cambium_ss_dl_utilization=-76;-50;-80;;;
            Raises:
                ValueError ,Exception
    """
    state = 3
    infotext = "unknown_value"
    status_list = [] 
    rate = None
    wrapped =False
    try:
        if info:
	    status_list = []
	    if info[0][0]:
		dl_utilization = info[0][0]
		this_time = int(time.time())
		try:
			timedif, rate = get_counter("cambium_ss_dl_utilization", this_time, saveint(dl_utilization))
			rate =(rate*8)/(1024*1024)
                except MKCounterWrapped:
                       	wrapped=True
                status_list.append(("dl_utilization","%.2f" % (rate)))
		infotext = "Downlink utilization [time=%s count=%s] " % (this_time,dl_utilization)
		state= 0
	else:
	    infotext = "No interface present"
	    
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value"
    if wrapped:
        infotext = "Counter wrapped"
    
    return (state, infotext, status_list)


check_info["cambium_ss_dl_utilization"] = {
    'check_function': check_cambium_ss_dl_utilization,
    'service_description': 'cambium_ss_dl_utilization',
    'has_perfdata': True,
}

#######################################################################
#	SNMP OID
#######################################################################
snmp_info["cambium_ss_dl_utilization"] = ( ".1.3.6.1.2.1.2.2.1", ["16.1"] )
