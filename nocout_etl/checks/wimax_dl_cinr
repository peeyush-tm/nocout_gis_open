#!/usr/bin/python

import sys
from telnetlib import Telnet
import socket
import json
import os
import binascii
from datetime import datetime,timedelta
try:
    from mysql_connection_1 import db_connection
    db_obj = db_connection()
    memc = db_obj.memcache_connect
except:
    memc = None
"""
operating Frequency of ss device  Poller script.

This is part of device application. 
Poller script determines the operating ptx of device. 
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.1.2.0 from snmp agent of device at specific interval.
Device on which Frequency operating is sent to device application 

"""
# ######################################################################
# Function: check_wimax_dl_cinr
#
# Parameters: info (SNMP Ouput) _no_params (No Parameters)
#
# Output: service state ,plugin output
# ######################################################################





def live_query_dl_cinr(mac):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.
    
        """
	exit_value = 3
	dl_cinr = None
	ss_params = None
	if memc:
		value_list = memc.get(mac)
		if value_list:
			try:
				dl_cinr = int(value_list[3])
			except:
				dl_cinr = None
        return dl_cinr



def check_wimax_dl_cinr(item, params, info):
    """
            check_wimax_dl_cinr function calcdlates the operating ptx

            Args:
                    item (str) Specific item on SNMP output on which we want to filter resdlts

            Kwargs:
                    params (tuple) Check parameters for critical and warning state of service

            Returns:
                    state (int) :
                                    0 : OK
                                    1 : Warning
                                    2: Critical
                3: unknown
                    infotext(string):
                                    plugin output
                                    Example : OK - 5835

                    Raises:
                            ValueError ,Exception
"""
    state = 3
    infotext = "unknown_value"
    warn,crit = params
    dl_cinr = None
    this_time = datetime.now()
    t_stmp = this_time + timedelta(minutes=-(this_time.minute % 5))
    t_stmp = t_stmp.replace(second=0,microsecond=0)
    current_time =int(time.mktime(t_stmp.timetuple()))
    try:
	mac_info = sum(info,[])
        mac_list=map(lambda x: convert(x),mac_info)
        if mac_list[1] != '00:00:00:00:00:00':
                ss_mac= mac_list[1]
        else:
                index =[i for i, e in enumerate(mac_list) if e != '00:00:00:00:00:00']
                index =index[0]
                ss_mac = mac_list[index]
	if ss_mac:
		dl_cinr = live_query_dl_cinr(ss_mac )
		if dl_cinr != None:
			if dl_cinr < crit:
				state  = 2
			elif dl_cinr >= crit and dl_cinr <= warn:
				state = 1
			else:
				state = 0
			if memc:
				key1 = str(g_hostname) + "_dl_cinr" + "_" + str(current_time)
				memc.set(key1,dl_cinr,600)
			infotext = "Device downlink cinr  is %s " % dl_cinr
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value"

    return (state, infotext, [("dl_cinr", dl_cinr, warn, crit)])


check_info["wimax_dl_cinr"] = {
    'check_function': check_wimax_dl_cinr,
    'service_description': 'wimax_dl_cinr',
    'has_perfdata' : True,
}

#########################################################################
#	SNMP OID for the operating ptx
#########################################################################
snmp_info["wimax_dl_cinr"] = ( ".1.3.6.1.2.1.10.184.1.3.1.1.1", ["17.1"] )
