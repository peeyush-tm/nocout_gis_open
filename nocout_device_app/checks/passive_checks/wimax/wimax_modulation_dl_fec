#!/usr/bin/python

import sys
from telnetlib import Telnet
import socket
import json
import os
import binascii
import mysql.connector
"""
operating Frequency of ss device  Poller script.

This is part of device application. 
Poller script determines the operating ptx of device. 
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.1.2.0 from snmp agent of device at specific interval.
Device on which Frequency operating is sent to device application 

"""
# ######################################################################
# Function: check_wimax_modulation_dl_fec
#
# Parameters: info (SNMP Ouput) _no_params (No Parameters)
#
# Output: service state ,plugin output
# ######################################################################






def live_query_modulation_dl_fec(mac):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.
    
        """
	modulation_dl_fec = None
	ss_params = None
	if memc:
		value_list = memc.get(mac)
		if value_list:
			try:
				modulation_dl_fec = value_list[7]
			except:
				 modulation_dl_fec = None
		
		if not modulation_dl_fec:
			try:
				key1 = mac + "_topology"
				ss_params = memc.get(key1)
			except:
				pass 
	if not modulation_dl_fec:
		if not ss_params: 
        		host_name = extract_host_from_wimax_topology(mac)
			try:
				bs_hostname = host_name[0][0]
				bs_site = host_name[0][1]
			except:
				bs_hostname = None
			if memc:
				if bs_hostname:
					try:
						arg_list = []
						arg_list.append(bs_hostname,bs_site)
						key = mac + "_topology"
						memc.set(key,arg_list,360)
					except:
						pass
		else:
			bs_hostname = ss_params[0]
			bs_site = ss_params[1]
        	try:
                	if bs_hostname:
                        	query_string = "GET services\nColumns: plugin_output\nFilter: " + \
                                "service_description = %s\nFilter: host_name = %s\nOutputFormat: json\n" % ("wimax_topology",bs_hostname)

				site = bs_site
				machine_name = site.split('_')[0]
				socket_ip = _LIVESTATUS[machine_name]['host']
				socket_port = _LIVESTATUS[machine_name][site]['port']

				query_output = json.loads(get_from_socket(socket_ip,socket_port,query_string,site,machine_name).strip())
				if query_output[0][0]:
					plugin_output = str(query_output[0][0].split('OK -')[1])
					plugin_output = [entry for entry in plugin_output.split(' ')]
					entry=filter(lambda x: mac in x.lower() , plugin_output)
					modulation_dl_fec = entry[0].split('=')[1].split(',')[6]

		except:
                	modulation_dl_fec= None
        return modulation_dl_fec

def convert(x):
        mac_in_hex=binascii.b2a_hex(x)
        n=2
        mac=(':').join([mac_in_hex[i:i+2] for i in range(0, len(mac_in_hex), n)])
        mac=mac.lower()
        return mac


def check_wimax_modulation_dl_fec(item, params, info):
    """
            check_wimax_modulation_dl_fec function calcdlates the operating ptx

            Args:
                    item (str) Specific item on SNMP output on which we want to filter resdlts

            Kwargs:
                    params (tuple) Check parameters for critical and warning state of service

            Returns:
                    state (int) :
                                    0 : OK
                                    1 : Warning
                                    2: Critical
                3: unknown
                    infotext(string):
                                    plugin output
                                    Example : OK - 5835

                    Raises:
                            ValueError ,Exception
"""
    state = 3
    infotext = "unknown_value"
    modulation_dl_fec =None
    dl_fec_normal =  ["qam1634", "qam6423","qam6434"]
    dl_fec_warning = params[0]
    dl_fec_critical = params[1]

    try:
	mac_info = sum(info,[])
        mac_list=map(lambda x: convert(x),mac_info)
        if mac_list[1] != '00:00:00:00:00:00':
                ss_mac= mac_list[1]
        else:
                index =[i for i, e in enumerate(mac_list) if e != '00:00:00:00:00:00']
                index =index[0]
                ss_mac = mac_list[index]
	if ss_mac:
		modulation_dl_fec = live_query_modulation_dl_fec(ss_mac )
		if modulation_dl_fec:
			mod_dl_fec = "".join(e for e in modulation_dl_fec if e.isalnum())
			if mod_dl_fec in dl_fec_critical:
				state  = 2
			elif mod_dl_fec in dl_fec_warning:
				state  = 1
			elif mod_dl_fec in dl_fec_normal:
				state  = 0
			else:
				state = 3
				modulation_dl_fec = None
			infotext = "Device downlink modulation FEC is %s " % modulation_dl_fec	
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value"

    return (state, infotext, [("modulation_dl_fec", modulation_dl_fec)])


check_info["wimax_modulation_dl_fec"] = {
    'check_function': check_wimax_modulation_dl_fec,
    'service_description': 'wimax_modulation_dl_fec',
    'has_perfdata': True,
}

#########################################################################
#	SNMP OID for the operating ptx
#########################################################################
snmp_info["wimax_modulation_dl_fec"] = ( ".1.3.6.1.2.1.10.184.1.3.1.1.1", ["17.1"] )

