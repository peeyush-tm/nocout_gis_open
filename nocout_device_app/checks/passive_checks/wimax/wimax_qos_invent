#!/usr/bin/python

import sys
from telnetlib import Telnet
import socket
import json
import os
import re
import mysql.connector
"""
operating Frequency of ss device  Poller script.

This is part of device application. 
Poller script determines the operating ptx of device. 
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.1.2.0 from snmp agent of device at specific interval.
Device on which Frequency operating is sent to device application 

"""
# ######################################################################
# Function: check_wimax_qos_invent
#
# Parameters: info (SNMP Ouput) _no_params (No Parameters)
#
# Output: service state ,plugin output
# ######################################################################






def live_query_qos(host_name,mac,site):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.

        """
        exit_value = 3
        ul_qos = None
        dl_qos = None
        try:
		machine_name = site.split('_')[0]
               	socket_ip = _LIVESTATUS[machine_name]['host']
                socket_port = _LIVESTATUS[machine_name][site]['port']

                query_string = "GET services\nColumns: plugin_output\nFilter: " + \
                                "service_description = %s\nFilter: host_name = %s\nOutputFormat: python\n" % ("wimax_bs_ss_params",host_name)

                query_output = eval(get_from_socket(socket_ip,socket_port,query_string,site,machine_name).strip())
                if query_output[0][0]:
                        plugin_output = str(query_output[0][0].split('OK -')[1])
                        plugin_output = [entry for entry in plugin_output.split(' ')]
			plugin_output = filter(lambda x: mac in x,plugin_output)
			ul_qos = plugin_output[0].split('=')[1].split(',')[2]
			dl_qos = plugin_output[0].split('=')[1].split(',')[3]

        except:
                dl_qos = None
		ul_qos = None
        return ul_qos,dl_qos




def check_wimax_qos_invent(item, _no_params, info):
    """
            check_wimax_qos_invent function calcdlates the operating ptx

            Args:
                    item (str) Specific item on SNMP output on which we want to filter resdlts

            Kwargs:
                    params (tuple) Check parameters for critical and warning state of service

            Returns:
                    state (int) :
                                    0 : OK
                                    1 : Warning
                                    2: Critical
                3: unknown
                    infotext(string):
                                    plugin output
                                    Example : OK - 5835

                    Raises:
                            ValueError ,Exception
"""
    state = 3
    infotext = "unknown_value"
    dl_qos= None
    ul_qos = None
    try:
	mac_info = sum(info,[])
        mac_list=map(lambda x: convert(x),mac_info)
        if mac_list[1] != '00:00:00:00:00:00':
                ss_mac= mac_list[1]
                state = 0
        else:
                index =[i for i, e in enumerate(mac_list) if e != '00:00:00:00:00:00']
                index =index[0]
                ss_mac = mac_list[index]
	if ss_mac:
		if memc:
			key = ss_mac + "_params"
			value_list = memc.get(key)
			if value_list:
                		try:
					ul_qos = value_list[2]
					dl_qos = value_list[3]
				except:
					ul_qos = None
					dl_qos = None
		if not ul_qos and not dl_qos:	
			host_name = extract_host_from_wimax_topology(ss_mac)
			if host_name[0][0]:
				ul_qos,dl_qos =live_query_qos(host_name[0][0],ss_mac,host_name[0][1])
		if dl_qos and ul_qos:
			dl_qos = float(dl_qos)/(1000.0*1000)
			ul_qos = float(ul_qos)/(1000.0*1000)
			infotext = "dl_qos=%s ul_qos=%s" % (dl_qos,ul_qos)
			state = 0
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value"

    return (state, infotext,[("ul_qos",ul_qos),("dl_qos",dl_qos)])


check_info["wimax_qos_invent"] = {
    'check_function': check_wimax_qos_invent,
    'service_description': 'wimax_qos_invent',
    'has_perfdata':True,
}

#########################################################################
#	SNMP OID for the operating ptx
#########################################################################
snmp_info["wimax_qos_invent"] = ( ".1.3.6.1.2.1.10.184.1.3.1.1.1", ["17.1"] )
