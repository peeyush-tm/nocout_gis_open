#!/usr/bin/python

import sys
from telnetlib import Telnet
import socket
import json
import os
import binascii
import mysql.connector
"""
operating Frequency of ss device  Poller script.

This is part of device application. 
Poller script determines the operating ptx of device. 
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.1.2.0 from snmp agent of device at specific interval.
Device on which Frequency operating is sent to device application 

"""
# ######################################################################
# Function: check_wimax_ss_ip
#
# Parameters: info (SNMP Ouput) _no_params (No Parameters)
#
# Output: service state ,plugin output
# ######################################################################

def extract_hostip_from_wimax_topology(ss_host_mac):
	from mysql_connection import db
	query = """
	select connected_device_ip from performance_topology where connected_device_mac ='%s' """ %(ss_host_mac)
	#db = mysql_conn()
	cur = db.cursor()
	cur.execute(query)
	data = cur.fetchall()
	cur.close()
	db.close()
	return data



def check_wimax_ss_ip(item, _no_params, info):
    """
            check_wimax_ss_ip function calcdlates the operating ptx

            Args:
                    item (str) Specific item on SNMP output on which we want to filter resdlts

            Kwargs:
                    params (tuple) Check parameters for critical and warning state of service

            Returns:
                    state (int) :
                                    0 : OK
                                    1 : Warning
                                    2: Critical
                3: unknown
                    infotext(string):
                                    plugin output
                                    Example : OK - 5835

                    Raises:
                            ValueError ,Exception
"""
    state = 3
    infotext = "unknown_value"
    ss_ip = None
    try:
	mac_info = sum(info,[])
        mac_list=map(lambda x: convert(x),mac_info)
        if mac_list[1] != '00:00:00:00:00:00':
                ss_mac= mac_list[1]
                state = 0
        else:
                index =[i for i, e in enumerate(mac_list) if e != '00:00:00:00:00:00']
                index =index[0]
                ss_mac = mac_list[index]
	if ss_mac:
		if memc:
			value_list = memc.get(ss_mac)
			if value_list:
				try:
					ss_ip = value_list[10]
					state = 0
        				infotext = "%s" % ss_ip
				except:
					ss_ip = None
		if not ss_ip:
			#host_ip = extract_hostip_from_wimax_topology(ss_mac)
			#if host_ip[0][0]:
			#ss_ip = host_ip[0][0]
			ss_ip = ipaddresses.get(g_hostname)
			state = 0
        		infotext = "%s" % ss_ip
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value"

    return (state, infotext,[("ss_ip",ss_ip)])


check_info["wimax_ss_ip"] = {
    'check_function': check_wimax_ss_ip,
    'service_description': 'wimax_ss_ip',
    'has_perfdata' : True,
}

#########################################################################
#	SNMP OID for the operating ptx
#########################################################################
snmp_info["wimax_ss_ip"] = ( ".1.3.6.1.2.1.10.184.1.3.1.1.1", ["17.1"] )
