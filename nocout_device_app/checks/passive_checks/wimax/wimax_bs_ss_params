#!/usr/bin/python

import sys
from telnetlib import Telnet
import socket
import json
import os
import re
import mysql.connector
"""
operating Frequency of ss device  Poller script.

This is part of device application. 
Poller script determines the operating ptx of device. 
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.1.2.0 from snmp agent of device at specific interval.
Device on which Frequency operating is sent to device application 

"""
# ######################################################################
# Function: check_wimax_bs_ss_params
#
# Parameters: info (SNMP Ouput) _no_params (No Parameters)
#
# Output: service state ,plugin output
# ######################################################################




def connection_telnet_for_params(host_ip, port):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.
    
        """
	params_dict ={}
        try:
                tn = Telnet(host_ip,port,timeout=6)
        except socket.timeout:
		return params_dict
        tn.read_until("Login:")
        tn.write("wireless" + "\r\n")
        tn.read_until("Password:")
        tn.write("wirelessone" + "\r\n")
	tn.write("show ss measurement\r\n")
        tn.write("show service-flows\r\n")
        tn.write("show service-class\r\n")
	tn.write("show ss uptime\r\n")
        tn.write("exit\r\n")
        data = tn.read_all()

	svc_cls_index_list = []
	params_value =[]
        temp_mac_index_map = {}
 	flag = 0
	data = data.split("\n")
	try:
		match_string = '([a-fA-F0-9]{2}[:|\-]?){6}'
		params_dict,data = extract_ul_dl_thoughput(params_dict,data)
		if data:
			params_dict,data= extract_svc_cls_index(params_dict,data)
	        	params_dict=extract_session_uptime(params_dict,data)
	except:
		params_dict = {}
	return params_dict
def extract_session_uptime(params_dict,data):
	match_string = '([a-fA-F0-9]{2}[:|\-]?){6}'
	for i,row in enumerate(data):
		if re.search(match_string ,row):
			params_list = [r for r in row.split()]
			mac = str(params_list[1])
			year =  int(params_list[2])
			day = int(params_list[4])
			hour = int(params_list[6])
			minutes = int(params_list[8])
			seconds = int(params_list[11])	
			uptime = ((year*365*24*60) + (day*24*60) + (hour*60) + minutes) * 60 + seconds 
			params_dict[mac].append(uptime)
	return params_dict
	
def  extract_ul_dl_thoughput(params_dict,data):
	match_string = '([a-fA-F0-9]{2}[:|\-]?){6}'
	for i, row in enumerate(data):
		if re.search(match_string,row):
			params_list = [r for r in row.split()]
			dl_throughput = params_list[10]
			ul_throughput = params_list[6]
			mac_address = str(params_list[2])
			if mac_address in params_dict.keys():
				params_dict[mac_address].append(ul_throughput)
				params_dict[mac_address].append(dl_throughput)
			else:
				params_dict[mac_address] = [] 
				params_dict[mac_address].append(ul_throughput)
				params_dict[mac_address].append(dl_throughput)
		if "show service-flows" in row:
			break
	return params_dict,data[i+1:]


def  extract_svc_cls_index(params_dict,data):
	temp_mac_index_map= {}
	match_string = '([a-fA-F0-9]{2}[:|\-]?){6}'
	for i, row in enumerate(data):
		if re.search(match_string,row) and ("UPSTREAM" in row or "DOWNSTREAM" in row):
			params_list = [r for r in row.split()]
			mac_for_svc_cls = str(params_list[0])
			svc_cls_index = int(params_list[4])
			if mac_for_svc_cls in temp_mac_index_map.keys():
				temp_mac_index_map[mac_for_svc_cls].append(svc_cls_index)
			else:
				temp_mac_index_map[mac_for_svc_cls] = []
				temp_mac_index_map[mac_for_svc_cls].append(svc_cls_index)
		if "show service-class" in row:
			break
	params_dict = extract_svc_class(data[i+1:],temp_mac_index_map,params_dict)
	return params_dict,data[i+1:]

def extract_svc_class(data,temp_mac_index_map,params_dict):
	svc_cls_map_index= {}
	svc_cls_index_list=[]
	qos_result = {}
	for entry in temp_mac_index_map.keys():
		svc_cls_index_list=svc_cls_index_list+temp_mac_index_map.get(entry)

	cls_index_set  = set(svc_cls_index_list)
	result = list(cls_index_set)
	for item in result:
		pattern = str(item) + "[\w+ _]*"
		for entry in data:
			if re.match(pattern,entry):
				s= re.match(pattern,entry)
				row = s.group(0)
				break
		try:
			params_list = [r for r in row.split()]
			qos = params_list[-1]
		except:
			qos = ""
		svc_cls_map_index[item] =qos
			
	for entry in temp_mac_index_map.keys():
		ul_qos =svc_cls_map_index.get(temp_mac_index_map.get(entry)[0])
		dl_qos =svc_cls_map_index.get(temp_mac_index_map.get(entry)[1])
		params_dict[entry].append(ul_qos) 
		params_dict[entry].append(dl_qos)
	return params_dict


def check_wimax_bs_ss_params(item, _no_params, info):
    state = 3
    service_tag = '_params'
    infotext = "unknown_value"
    try:
        if info:
                if info[0][0]:
                        bs_ip = info[0][0]
                        params_dict =connection_telnet_for_params(bs_ip, 23)
			
                        if params_dict:
				infotext = ""
                                for entry in params_dict.keys():
                                        try:
                                                ul_utilization = params_dict.get(entry)[0]
                                        except:
                                                ul_utilization = ""
                                        try:
                                                dl_utilization = params_dict.get(entry)[1]
                                        except:
                                                dl_utilization = ""
                                        try:
                                                ul_qos = params_dict.get(entry)[2]
                                        except:
                                                ul_qos = ""
                                        try:
                                                dl_qos = params_dict.get(entry)[3]
                                        except:
                                                dl_qos = ""
                                        try:
                                                uptime = params_dict.get(entry)[4]
                                        except:
                                                uptime = ""
                                        infotext += str(entry.lower()) +"=" + str(ul_utilization) +","+ str(dl_utilization) + "," + str(ul_qos) +"," +\
                                                 str(dl_qos) +","+ str(uptime) + " "
					try:
						if memc:
							value_list= []
							key = str(entry.lower()) + service_tag	
							value_list.extend([str(ul_utilization),str(dl_utilization),
							str(ul_qos),str(dl_qos),str(uptime)])
                                			memc.set(key,value_list,360)
                        		except:
                                		pass

                                state = 0
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value"

    return (state, infotext)


check_info["wimax_bs_ss_params"] = {
    'check_function': check_wimax_bs_ss_params,
    'service_description': 'wimax_bs_ss_params',
}

#########################################################################
#       SNMP OID for the operating ptx
#########################################################################
snmp_info["wimax_bs_ss_params"] = ( ".1.3.6.1.4.1.5812.2000.4.1.1", ["1.0"] )


