#!/usr/bin/python

import sys
from telnetlib import Telnet
import socket
import json
import os
import binascii
import mysql.connector
from ast import literal_eval
#from mysql_connection import db
#from mysql_connection import con_pool



"""
operating Frequency of ss device  Poller script.

This is part of device application. 
Poller script determines the operating ptx of device. 
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.1.2.0 from snmp agent of device at specific interval.
Device on which Frequency operating is sent to device application 

"""
# ######################################################################
# Function: check_wimax_dl_rssi
#
# Parameters: info (SNMP Ouput) _no_params (No Parameters)
#
# Output: service state ,plugin output
# ######################################################################




def get_from_socket(socket_ip,socket_port, query,site,machine):
    """
    Function_name : get_from_socket (collect the query data from the socket)

    Args: site_name (poller on which monitoring data is to be collected)

    Kwargs: query (query for which data to be collectes from nagios.)

    Return : None

    raise 
         Exception: SyntaxError,socket error 
    """
    my_site  = var_dir.split('/')[3]
    #my_machine = nagios_user.split('_')[0]
    if site == my_site:
	socket_path = "/omd/dev_slave/%s/var/run/live" % site
	s=socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
	s.connect(socket_path)
    else:
    	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    	s.connect((socket_ip,socket_port))
    s.settimeout(60.0)
    s.send(query)
    s.shutdown(socket.SHUT_WR)
    output = ''
    while True:
     try:
        out = s.recv(100000000)
     except socket.timeout,e:
        break
     out.strip()
     if not len(out):
        break
     output += out

    #try:
    #	output = s.recv(100000000)
    #	output.strip("\n")
    #except:
    # 	output=None
    return output


def live_query_dl_rssi(mac):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.
    
        """
	exit_value = 3
	dl_rssi = None
	ss_params = None
	if memc:
		value_list = memc.get(mac)
		if value_list:
			try:
				dl_rssi = int(value_list[1])
			except:
				dl_rssi = None
        return dl_rssi



def check_wimax_dl_rssi(item, params, info):
    """
            check_wimax_dl_rssi function calcdlates the operating ptx

            Args:
                    item (str) Specific item on SNMP output on which we want to filter resdlts

            Kwargs:
                    params (tuple) Check parameters for critical and warning state of service

            Returns:
                    state (int) :
                                    0 : OK
                                    1 : Warning
                                    2: Critical
                3: unknown
                    infotext(string):
                                    plugin output
                                    Example : OK - 5835

                    Raises:
                            ValueError ,Exception
    """
    state = 3
    infotext = "unknown_value"
    warn,crit = params
    dl_rssi = None
    this_time = datetime.now()
    t_stmp = this_time + timedelta(minutes=-(this_time.minute % 5))
    t_stmp = t_stmp.replace(second=0,microsecond=0)
    current_time =int(time.mktime(t_stmp.timetuple()))
    try:
	mac_info = sum(info,[])
        mac_list=map(lambda x: convert(x),mac_info)
        if mac_list[1] != '00:00:00:00:00:00':
                ss_mac= mac_list[1]
        else:
                index =[i for i, e in enumerate(mac_list) if e != '00:00:00:00:00:00']
                index =index[0]
                ss_mac = mac_list[index]
	if ss_mac:
		dl_rssi = live_query_dl_rssi(ss_mac )
		if dl_rssi:
			if dl_rssi < crit:
				state  = 2
			elif dl_rssi >= crit and dl_rssi <= warn:
				state = 1
			else:
				state = 0
			if memc:
				key1 = str(g_hostname) + "_dl_rssi" + "_" + str(current_time)
				memc.set(key1,dl_rssi,600)
        		infotext = "Device downlink signal strength indication is %s " % dl_rssi
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value1"

    return (state, infotext, [("dl_rssi", dl_rssi, warn, crit)])


check_info["wimax_dl_rssi"] = {
    'check_function': check_wimax_dl_rssi,
    'service_description': 'wimax_dl_rssi',
    'has_perfdata': True,
}

#########################################################################
#	SNMP OID for the operating ptx
#########################################################################
snmp_info["wimax_dl_rssi"] = ( ".1.3.6.1.2.1.10.184.1.3.1.1.1", ["17.1"] )
