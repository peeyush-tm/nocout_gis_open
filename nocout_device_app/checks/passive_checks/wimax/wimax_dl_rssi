#!/usr/bin/python

import sys
from telnetlib import Telnet
import socket
import json
import os
import binascii
import mysql.connector
from datetime import datetime,timedelta
import time
#from mysql_connection import db
#from mysql_connection import con_pool
try:
    import nocout_settings
    from nocout_settings import _DATABASES, _LIVESTATUS
except Exception as exp:
    print exp

from mysql_connection import memc


"""
operating Frequency of ss device  Poller script.

This is part of device application. 
Poller script determines the operating ptx of device. 
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.1.2.0 from snmp agent of device at specific interval.
Device on which Frequency operating is sent to device application 

"""
# ######################################################################
# Function: check_wimax_dl_rssi
#
# Parameters: info (SNMP Ouput) _no_params (No Parameters)
#
# Output: service state ,plugin output
# ######################################################################

def mysql_conn():
        db = None
        try:
            db = mysql.connector.connect(
                        user=_DATABASES['user'],
                        host=_DATABASES['host'],
                        password=_DATABASES['password'],
                        database=_DATABASES['database'],
                        port=_DATABASES['port']
                        )
        except Exception as exp:
            print exp
        return db



def extract_host_from_wimax_topology(ss_host_mac):
	from mysql_connection import db
	query = """
	select device_name ,site_name from performance_topology where connected_device_mac ='%s' """ %(ss_host_mac)
	#db = mysql_conn()
	cur = db.cursor()
	cur.execute(query)
	data = cur.fetchall()
	cur.close()
	#db.close()
	return data

def get_from_socket(socket_ip,socket_port, query,site,machine):
    """
    Function_name : get_from_socket (collect the query data from the socket)

    Args: site_name (poller on which monitoring data is to be collected)

    Kwargs: query (query for which data to be collectes from nagios.)

    Return : None

    raise 
         Exception: SyntaxError,socket error 
    """

    my_machine = nagios_user.split('_')[0]
    if site == nagios_user:
	s=socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
	s.connect(livestatus_unix_socket)
    elif machine == my_machine:
	socket_path = "/omd/sites/%s/tmp/run/live" % site
	s=socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
	s.connect(socket_path)
    else:
    	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    	s.connect((socket_ip,socket_port))
    s.settimeout(60.0)
    s.send(query)
    s.shutdown(socket.SHUT_WR)
    try:
    	output = s.recv(100000000)
    	output.strip("\n")
    except:
	output=None
    return output


def live_query_dl_rssi(mac):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.
    
        """
	exit_value = 3
	dl_rssi = None
	ss_params = None
	if memc:
		value_list = memc.get(mac)
		if value_list:
			try:
				dl_rssi = int(value_list[1])
			except:
				dl_rssi = None
		if not dl_rssi:
			try:
				key1 = mac + "_topology"
				ss_params = memc.get(key1)
			except:
				pass 
	if not dl_rssi:
		if not ss_params: 
        		host_name = extract_host_from_wimax_topology(mac)
			try:
				bs_hostname = host_name[0][0]
				bs_site = host_name[0][1]
			except:
				bs_hostname = None
			if memc:
				if bs_hostname:
					try:
						arg_list = []
						arg_list.append(bs_hostname,bs_site)
						key = mac + "_topology"
						memc.set(key,arg_list,360)
					except:
						pass
		else:
			bs_hostname = ss_params[0]
			bs_site = ss_params[1]			
        	try:
                	if bs_hostname:
                        	query_string = "GET services\nColumns: plugin_output\nFilter: " + \
                                "service_description = %s\nFilter: host_name = %s\nOutputFormat: json\n" % ("wimax_topology",bs_hostname)
			

				site = bs_site
                        	machine_name = site.split('_')[0]
                        	socket_ip = _LIVESTATUS[machine_name]['host']
                        	socket_port = _LIVESTATUS[machine_name][site]['port']

                        	query_output = json.loads(get_from_socket(socket_ip,socket_port,query_string,site,machine_name).strip())
                        	if query_output[0][0]:
                                	plugin_output = str(query_output[0][0].split('OK -')[1])
                                	plugin_output = [entry for entry in plugin_output.split(' ')]
                                	entry=filter(lambda x: mac in x.lower(), plugin_output)
                                	dl_rssi = int(entry[0].split('=')[1].split(',')[0])

		except:
                	dl_rssi= None
        return dl_rssi



def check_wimax_dl_rssi(item, params, info):
    """
            check_wimax_dl_rssi function calcdlates the operating ptx

            Args:
                    item (str) Specific item on SNMP output on which we want to filter resdlts

            Kwargs:
                    params (tuple) Check parameters for critical and warning state of service

            Returns:
                    state (int) :
                                    0 : OK
                                    1 : Warning
                                    2: Critical
                3: unknown
                    infotext(string):
                                    plugin output
                                    Example : OK - 5835

                    Raises:
                            ValueError ,Exception
    """
    state = 3
    infotext = "unknown_value"
    warn,crit = params
    dl_rssi = None
    this_time = datetime.now()
    t_stmp = this_time + timedelta(minutes=-(this_time.minute % 5))
    t_stmp = t_stmp.replace(second=0,microsecond=0)
    current_time =int(time.mktime(t_stmp.timetuple()))
    try:
	mac_info = sum(info,[])
        mac_list=map(lambda x: convert(x),mac_info)
        if mac_list[1] != '00:00:00:00:00:00':
                ss_mac= mac_list[1]
        else:
                index =[i for i, e in enumerate(mac_list) if e != '00:00:00:00:00:00']
                index =index[0]
                ss_mac = mac_list[index]
	if ss_mac:
		dl_rssi = live_query_dl_rssi(ss_mac )
		if dl_rssi:
			if dl_rssi < crit:
				state  = 2
			elif dl_rssi >= crit and dl_rssi <= warn:
				state = 1
			else:
				state = 0
			if memc:
				key1 = str(g_hostname) + "_dl_rssi" + "_" + str(current_time)
				memc.set(key1,dl_rssi,600)
        		infotext = "Device downlink signal strength indication is %s " % dl_rssi
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value1"

    return (state, infotext, [("dl_rssi", dl_rssi, warn, crit)])


check_info["wimax_dl_rssi"] = {
    'check_function': check_wimax_dl_rssi,
    'service_description': 'wimax_dl_rssi',
    'has_perfdata': True,
}

#########################################################################
#	SNMP OID for the operating ptx
#########################################################################
snmp_info["wimax_dl_rssi"] = ( ".1.3.6.1.2.1.10.184.1.3.1.1.1", ["17.1"] )
