#!/usr/bin/python

import sys
from telnetlib import Telnet
import socket
import json
import os
import binascii
import mysql.connector
"""
operating Frequency of ss device  Poller script.

This is part of device application. 
Poller script determines the operating ptx of device. 
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.1.2.0 from snmp agent of device at specific interval.
Device on which Frequency operating is sent to device application 

"""
# ######################################################################
# Function: check_wimax_dl_modulation_change_invent
#
# Parameters: info (SNMP Ouput) _no_params (No Parameters)
#
# Output: service state ,plugin output
# ######################################################################





def check_wimax_dl_modulation_change_invent(item, params, info):
    """
            check_wimax_dl_modulation_change_invent function calcdlates the operating ptx

            Args:
                    item (str) Specific item on SNMP output on which we want to filter resdlts

            Kwargs:
                    params (tuple) Check parameters for critical and warning state of service

            Returns:
                    state (int) :
                                    0 : OK
                                    1 : Warning
                                    2: Critical
                3: unknown
                    infotext(string):
                                    plugin output
                                    Example : OK - 5835

                    Raises:
                            ValueError ,Exception
"""
    state = 3
    infotext = "unknown_value"
    dl_modulation_change= ''
    warn ,crit =params
    try:
	    if memc:
		    value_list = memc.get('%s_ss_port_params' % g_hostname)
		    if value_list:
		    	dl_modulation_change = value_list[4]
    except:
	    pass
    try:
	if dl_modulation_change:
		if int(dl_modulation_change) > crit:
			state = 2
		elif int(dl_modulation_change) >= warn:
			state =1
		else:
			state =0

		infotext = "%s" % int(dl_modulation_change)
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value"

    return (state, infotext,[("dl_modulation_change",dl_modulation_change,warn,crit)])


check_info["wimax_dl_modulation_change_invent"] = {
    'check_function': check_wimax_dl_modulation_change_invent,
    'service_description': 'wimax_dl_modulation_change_invent',
    'has_perfdata':True,
}

#########################################################################
#	SNMP OID for the operating ptx
#########################################################################
snmp_info["wimax_dl_modulation_change_invent"] = ( ".1.3.6.1.2.1.10.184.1.3.1.1.1", ["17.1"] )
