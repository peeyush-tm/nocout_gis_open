#!/usr/bin/python

import sys
from telnetlib import Telnet
import socket
import json
import os
from mysql_connection import memc
import mysql.connector
"""
operating Frequency of ss device  Poller script.

This is part of device application. 
Poller script determines the operating ptx of device. 
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.1.2.0 from snmp agent of device at specific interval.
Device on which Frequency operating is sent to device application 

"""
# ######################################################################
# Function: check_wimax_ss_port_params
#
# Parameters: info (SNMP Ouput) _no_params (No Parameters)
#
# Output: service state ,plugin output
# ######################################################################



def connection_telnet_for_port_params(hostip, port):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.
    
        """
	ss_speed = ""
	ss_autoneg = ""
	ss_duplex= ""
	uptime = ""
	dl_modulation_change=""
	link_state =""
        try:
                tn = Telnet(hostip,port,timeout=5)
        except socket.timeout:
		return ss_speed,ss_autoneg,ss_duplex,uptime,dl_modulation_change,link_state	
        tn.read_until("Login:")
        tn.write("admin" + "\r\n")
        tn.read_until("Password:")
        tn.write("admin" + "\r\n")
        tn.write("show interface ethernet phy\r\n")
	tn.write("show uptime\r\n")
	tn.write("show cinr-distribution\r\n")
        tn.write("exit\r\n")
        data = tn.read_all()

        try:
                for i,row in enumerate(data.split("\n")):
			try:
                        	if "Speed" in row:
                                	ss_speed = row.split(':')[1].strip()
			except:
				ss_speed = ""
			try:
				if "AutoNeg" in row:
					ss_autoneg = row.split(':')[1].strip()
			except:
				ss_autoneg = ""
			try:
				if "Duplex" in row:
					ss_duplex = row.split(':')[1].strip()
					ss_duplex = ss_duplex.replace(' ','_')
			except:
				ss_duplex = ""
			
			try:
				if "Link" in row:
					link_state = row.split(':')[1].strip()
			except:
				link_state = ""
			try:
				if "seconds" in row:
                                	params_list = [r for r in row.split()]
                                	year =  int(params_list[4])
                                	day = int(params_list[6])
                                	hour = int(params_list[8])
                                	minutes = int(params_list[10])
                                	seconds = int(params_list[13])
                                	uptime = ((year*365*24*60) + (day * 24*60) + (hour*60) + minutes) * 60 + seconds
			except:
				uptime = ""
			try:
				if "downlink modulation changed:" in row:
                                	dl_modulation_change = row.split(':')[1].strip()
			except:
				dl_modulation_change = ""


        except:
                pass
	return ss_speed,ss_autoneg,ss_duplex,uptime,dl_modulation_change,link_state
                                

def check_wimax_ss_port_params(item, _no_params, info):
    """
            check_wimax_ss_port_params function calcdlates the operating ptx

            Args:
                    item (str) Specific item on SNMP output on which we want to filter resdlts

            Kwargs:
                    params (tuple) Check parameters for critical and warning state of service

            Returns:
                    state (int) :
                                    0 : OK
                                    1 : Warning
                                    2: Critical
                3: unknown
                    infotext(string):
                                    plugin output
                                    Example : OK - 5835

                    Raises:
                            ValueError ,Exception
    """
    state = 3
    infotext = ""
    ss_speed= None
    ipaddress = ipaddresses.get(g_hostname)
    try:
	ss_speed,ss_autoneg,ss_duplex,uptime,dl_modulation_change,link_state =connection_telnet_for_port_params(ipaddress, 23)
	infotext += "ss_speed=" + ss_speed + "," + "ss_autoneg="+ ss_autoneg + "," + "ss_duplex=" + ss_duplex + "," +\
	"uptime=" + str(uptime) +"," + "dl_modulation_change=" + dl_modulation_change + ","+ "link_state=" + link_state
 	state = 0
	service_tag = '_ss_port_params'
        try:
            if memc:
                value_list= []
                key = str(g_hostname) + service_tag
                value_list.extend([str(ss_speed),str(ss_autoneg),
                str(ss_duplex),str(uptime),str(dl_modulation_change),str(link_state)])
		#print "value_list",value_list
                memc.set(key,value_list,360)
        except:
            pass
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value"

    return (state, infotext)


check_info["wimax_ss_port_params"] = {
    'check_function': check_wimax_ss_port_params,
    'service_description': 'wimax_ss_port_params',
}

#########################################################################
#	SNMP OID for the operating ptx
#########################################################################
snmp_info["wimax_ss_port_params"] = ( ".1.3.6.1.2.1.10.184.1.3.1.1.1", ["17.1"] )
