#!/usr/bin/python

import sys
from telnetlib import Telnet
import socket
import json
import os
import binascii
import mysql.connector
"""
operating Frequency of ss device  Poller script.

This is part of device application. 
Poller script determines the operating ptx of device. 
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.1.2.0 from snmp agent of device at specific interval.
Device on which Frequency operating is sent to device application 

"""
# ######################################################################
# Function: check_wimax_ss_ul_utilization
#
# Parameters: info (SNMP Ouput) _no_params (No Parameters)
#
# Output: service state ,plugin output
# ######################################################################


def live_query_for_ul_utilization(mac):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.

        """
	exit_value = 3
	ul_utilization = None
	if memc:
		key = mac + "_params"
		value_list = memc.get(key)
		if value_list:
                	try:
                        	ul_utilization = value_list[0]
                	except:
                        	ul_utilization = None
		
		if not ul_utilization:
			try:
				key1 = mac + "_topology"
				ss_params = memc.get(key1)
			except:
				pass 
	if not ul_utilization:
		if not ss_params: 
        		host_name = extract_host_from_wimax_topology(mac)
			try:
				bs_hostname = host_name[0][0]
				bs_site = host_name[0][1]
			except:
				bs_hostname = None
			if memc:
				if bs_hostname:
					try:
						arg_list = []
						arg_list.append(bs_hostname,bs_site)
						key = mac + "_topology"
						memc.set(key,arg_list,360)
					except:
						pass
		else:
			bs_hostname = ss_params[0]
			bs_site = ss_params[1]			
		try:
			if bs_hostname:
				site = bs_site
				host = bs_hostname
                		machine_name = site.split('_')[0]
                		socket_ip = _LIVESTATUS[machine_name]['host']
                		socket_port = _LIVESTATUS[machine_name][site]['port']

                		query_string = "GET services\nColumns: plugin_output\nFilter: " + \
                                "service_description = %s\nFilter: host_name = %s\nOutputFormat: python\n" %("wimax_bs_ss_params",host)

                		query_output = eval(get_from_socket(socket_ip,socket_port,query_string,site,machine_name).strip())
                		if query_output[0][0]:
                        		plugin_output = str(query_output[0][0].split('OK -')[1])
                        		plugin_output = [entry for entry in plugin_output.split(' ')]
                        		plugin_output = filter(lambda x: mac in x,plugin_output)
                        		ul_utilization = plugin_output[0].split('=')[1].split(',')[0]

        	except:
                	ul_utilization = None
        return ul_utilization

                                

def check_wimax_ss_ul_utilization(item, _no_params, info):
    """
            check_wimax_ss_ul_utilization function calculates the operating ptx

            Args:
                    item (str) Specific item on SNMP output on which we want to filter results

            Kwargs:
                    params (tuple) Check parameters for critical and warning state of service

            Returns:
                    state (int) :
                                    0 : OK
                                    1 : Warning
                                    2: Critical
                3: unknown
                    infotext(string):
                                    plugin output
                                    Example : OK - 5835

                    Raises:
                            ValueError ,Exception
    """
    state = 3
    infotext = "unknown_value"
    ul_throughput= None
    try:
	mac_info = sum(info,[])
        mac_list=map(lambda x: convert(x),mac_info)
        if mac_list[1] != '00:00:00:00:00:00':
                ss_mac= mac_list[1]
                state = 0
        else:
                index =[i for i, e in enumerate(mac_list) if e != '00:00:00:00:00:00']
                index =index[0]
                ss_mac = mac_list[index]
	if ss_mac:
		ul_throughput =live_query_for_ul_utilization(ss_mac)
		if ul_throughput:
			ul_throughput = float(ul_throughput)/1024.0
			ul_throughput = round(ul_throughput,2)
			infotext = "SS downlink utilization is %s" % ul_throughput
			state = 0
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value"

    return (state, infotext,[("ul_utilization", ul_throughput)])


check_info["wimax_ss_ul_utilization"] = {
    'check_function': check_wimax_ss_ul_utilization,
    'service_description': 'wimax_ss_ul_utilization',
    'has_perfdata': True,
}

#########################################################################
#	SNMP OID for the operating ptx
#########################################################################
snmp_info["wimax_ss_ul_utilization"] = ( ".1.3.6.1.2.1.10.184.1.3.1.1.1", ["17.1"] )
