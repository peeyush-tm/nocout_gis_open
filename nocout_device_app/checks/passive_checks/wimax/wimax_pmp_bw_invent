#!/usr/bin/python

import sys
from telnetlib import Telnet
import socket
import json
import os

"""
operating Frequency of ss device  Poller script.

This is part of device application. 
Poller script determines the operating ptx of device. 
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.1.2.0 from snmp agent of device at specific interval.
Device on which Frequency operating is sent to device application 

"""
# ######################################################################
# Function: check_wimax_pmp_bw_invent
#
# Parameters: info (SNMP Ouput) _no_params (No Parameters)
#
# Output: service state ,plugin output
# ######################################################################

def live_query_pmp_bw(host_name):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.

        """
        exit_value = 3
        pmp1_bw, pmp2_bw = '', ''
	try:
	    if memc:
		    value_list = memc.get('%s_bs_params' % host_name)
		    if value_list:
			pmp1_bw,pmp2_bw = (value_list[11],value_list[12])
	except:
	    pass
	if not pmp1_bw or not pmp2_bw:
	    try:
		query_string = "GET services\nColumns: plugin_output\nFilter: " + \
				"service_description = %s\nFilter: host_name = %s\nOutputFormat: python\n" % ("wimax_aggregate_bs_params",host_name)

		query_output = eval(get_from_socket(None,None,query_string,nagios_user,None).strip())
		if query_output[0][0]:
			plugin_output = str(query_output[0][0].split('OK - ')[1])
			plugin_output = [entry for entry in plugin_output.split()]
			pmp1_bw, pmp2_bw = plugin_output[11].split('=')[1], plugin_output[12].split('=')[1]

	    except:
		pass
        return pmp1_bw, pmp2_bw

                                

def check_wimax_pmp_bw_invent(item, _no_params, info):
    """
            check_wimax_pmp_bw_invent function calcdlates the operating ptx

            Args:
                    item (str) Specific item on SNMP output on which we want to filter resdlts

            Kwargs:
                    params (tuple) Check parameters for critical and warning state of service

            Returns:
                    state (int) :
                                    0 : OK
                                    1 : Warning
                                    2: Critical
                3: unknown
                    infotext(string):
                                    plugin output
                                    Example : OK - 5835

                    Raises:
                            ValueError ,Exception
    """
    state = 3
    infotext = "unknown_value"
    pmp1_bw= ''
    pmp2_bw = ''
    try:
        pmp1_bw, pmp2_bw = live_query_pmp_bw(g_hostname)
	if pmp1_bw or pmp2_bw:
		infotext = "pmp1_bw=%s pmp2_bw=%s" % (pmp1_bw,pmp2_bw)
		state = 0
		try:
			if memc:
				key = g_hostname + "_pmp1_bw"
				memc.set(key,pmp1_bw)
				key = g_hostname + "_pmp2_bw"
				memc.set(key,pmp2_bw)
		except:
			pass
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value"

    return (state, infotext,[("pmp1_bw",pmp1_bw),("pmp2_bw",pmp2_bw)])


check_info["wimax_pmp_bw_invent"] = {
    'check_function': check_wimax_pmp_bw_invent,
    'service_description': 'wimax_pmp_bw_invent',
    'has_perfdata':True,
}

#########################################################################
#	SNMP OID for the operating ptx
#########################################################################
snmp_info["wimax_pmp_bw_invent"] = ( ".1.3.6.1.4.1.5812.2000.4.1.1", ["1.0"] )
