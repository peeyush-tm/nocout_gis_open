#!/usr/bin/python
from mysql_connection import memc
import sys
from telnetlib import Telnet
import socket
import os
import binascii
import mysql.connector

try:
    import nocout_settings
    from nocout_settings import _DATABASES, _LIVESTATUS
except Exception as exp:
    print exp
"""
"""
# ######################################################################
# Function: check_rad5k_ss_cell_radius_invent
#
# Parameters: info (SNMP Ouput) _no_params (No Parameters)
#
# Output: service state ,plugin output
# ######################################################################

def extract_host_from_rad5k_topology(ss_host_serial_number):
	"""
	    extract_host_from_rad5k_topology function connects with MySQL DB and extracts
	    Base Station Device ID and OMD site name corresponding to Sub Station Serial Number

            Args:
	    	    ss_host_serial_number(str) Sub Station Serial Number

	    Returns:
		    data(list)
	
	"""
        #cnx =con_pool.get_connection()
        from mysql_connection import db
        #print db
	#db = mysql_conn_1()
	#print db

        query = """
        select device_name ,site_name from performance_topology where connected_device_mac ='%s' """ %(ss_host_serial_number)
        #db = mysql_conn()
        #cur = cnx.cursor()
        cur = db.cursor()
        cur.execute(query)
        data = cur.fetchall()
        cur.close()
        #db.close()
        #cnx.close()
        return data

def live_query_for_rad5k_ss_cell_radius(serial_number):
        """
            live_query_for_rad5k_ss_cell_radius function calculates the SS Cell Radius by extracting 
	    data from memory using SS Serial number as key from memcache ;if data is not present in 
	    memcache it retrieves the data from Livestatus by making a socket connection and reading
	    plugin output of 'rad5k_topology_discover' through the details of its corresponded Base 
	    Station whose details are fetched from memcache or MySQL DB(if not present in memcache)

            Args:
                    ss_host_serial_number(str) Sub Station Serial Number

            Returns:

                    cell_radius(string): SS Cell Radius

            Raises:
                    Exception
        """
        
	exit_value = 3
        cell_radius = None
        bs_params = None
	if memc:
		key = serial_number + "_param"
        	value_list = memc.get(key)
	        if value_list:
        	        try:
                	        cell_radius = value_list[12]
                	except:
                        	cell_radius = None
		if cell_radius is None:
			try:
				key_bs = serial_number + "_topology"
				bs_params = memc.get(key_bs)
			except :
				pass
	if cell_radius is None :
		if not bs_params :
			host_name = extract_host_from_rad5k_topology(serial_number)
			print host_name
			try :
				bs_hostname = host_name[0][0]
				bs_site = host_name[0][1]

			except :
				bs_hostname = None
			if memc :
				if bs_hostname :
					try :
						arg_list = []	
						arg_list.append([bs_hostname,bs_site])
						key = serial_number + "_topology"
						memc.set(key,arg_list,360)
					except Exception,e :
						pass
		else :
			bs_hostname = bs_params[0][0]
			bs_site = bs_params[0][1]
                try:
                        if bs_hostname:
                                query_string = "GET services\nColumns: plugin_output\nFilter: " + \
                                "service_description = %s\nFilter: host_name = %s\nOutputFormat: python\n" % ("rad5k_topology_discover", bs_hostname)
				site = bs_site
        	                machine_name = site.split('_')[0]
	                        socket_ip = _LIVESTATUS[machine_name]['host']
        	                socket_port = _LIVESTATUS[machine_name][site]['port']

                                query_output = eval(get_from_socket(socket_ip,socket_port,query_string,site,machine_name).strip())
       	                        if query_output[0][0]:
               	                        plugin_output = str(query_output[0][0].split(' - ')[1])
                       	                plugin_output = [entry for entry in plugin_output.split(' ')]
                                       	entry=filter(lambda x: serial_number in x, plugin_output)
                                       	cell_radius = int(entry[0].split('=')[1].split('/')[12])

               	except Exception,e:
                       	cell_radius = None

        return cell_radius

def check_rad5k_ss_cell_radius_invent(item, _no_params, info):
	"""
	   check_rad5k_data_rate_invent function calculates the SS Cell Radius

            Args:
                    item (str) Specific item on SNMP output on which we want to filter results

            Kwargs:
                    params (tuple) Check parameters for critical and warning state of service

            Returns:
                    state (int) :
                                    0 : OK
                                    1 : Warning
                                    2: Critical
                                    3: unknown
                    infotext(string):
                                    plugin output
                                    Example : OK - cell_radius=420

                    Raises:
                            ValueError ,Exception
	"""
	state = 3
	infotext = "unknown_value_1"
	cell_radius= None
	try:
		if info :
		        ss_serial_number = info[0][0]
        		if ss_serial_number:
        	        	cell_radius =live_query_for_rad5k_ss_cell_radius(ss_serial_number)
	                	if cell_radius is not None:
        	       	        	infotext = "cell_radius=%s" % cell_radius
                			state = 0
	except Exception,e:
		print e
		infotext = "unknown_value"

	return (state, infotext,[("cell_radius",cell_radius)])

check_info["rad5k_ss_cell_radius_invent"] = {
    'check_function': check_rad5k_ss_cell_radius_invent,
    'service_description': 'rad5k_ss_cell_radius_invent',
    'has_perfdata': True,
}

#########################################################################
#       SNMP OID for the Cell Radius
#########################################################################
snmp_info["rad5k_ss_cell_radius_invent"] = ( ".1.3.6.1.4.1.4458.1000.1.1", ["29.0"] )  #.1.3.6.1.4.1.4458.1000.1.1.29.0


