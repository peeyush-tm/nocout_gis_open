#!/usr/bin/python
# ######################################################################
# Function: check_rad5k_dl_rssi
#
# Parameters: info (SNMP Ouput) _no_params (No Parameters)
#
# Output: service state ,plugin output
# ######################################################################

def live_query_for_rad5k_dl_rssi(serial_number):
        """
	    live_query_for_rad5k_dl_rssi function calculates the SS Downlink RSSI by extracting
            data from memory using SS Serial number as key from memcache ;if data is not present in
            memcache it retrieves the data from Livestatus by making a socket connection and reading
            plugin output of 'rad5k_topology_discover' through the details of its corresponded Base
            Station whose details are fetched from memcache or MySQL DB(if not present in memcache)

            Args:
                    ss_host_serial_number(str) Sub Station Serial Number

            Returns:

                    dl_rssi(string): SS Downlink RSSI

            Raises:
                    Exception

        """

        exit_value = 3
        dl_rssi = None
        bs_params = None
        if memc:
                key = serial_number + "_param"
                value_list = memc.get(key)
                if value_list:
                        try:
                                dl_rssi = value_list[1]
                        except:
                                dl_rssi = None
        return dl_rssi

def check_rad5k_dl_rssi(item, params, info):
	"""
           check_rad5k_dl_rssi function calculates the SS Downlink RSSI

            Args:
                    item (str) Specific item on SNMP output on which we want to filter results

            Kwargs:
                    params (tuple) Check parameters for critical and warning state of service

            Returns:
                    state (int) :
                                    0 : OK
                                    1 : Warning
                                    2: Critical
                                    3: unknown
                    infotext(string):
                                    plugin output
                                    Example : OK - dl_rssi=-51

                    Raises:
                            ValueError ,Exception
	"""
        try:
                warn , crit = params
        except ValueError :
                war = -50
                crit = -85


	state = 3
	infotext = "unknown_value"
	dl_rssi= None
	try:
		if info :
	        	ss_serial_number = info[0][0]
	        	if ss_serial_number:
	                	dl_rssi = int(live_query_for_rad5k_dl_rssi(ss_serial_number))
	                	if dl_rssi is not None:
	                        	if int(dl_rssi) <= crit :
	                                	state = 2
	                        	elif int(dl_rssi) > crit and int(dl_rssi) <= warn:
	                                	state = 1
        	                	else:
	                                	state = 0
	
	        	                infotext = "SS downlink rssi is %s" % dl_rssi
	except ValueError:
        	infotext = "type_mismatch_value"
	except:
        	infotext = "unknown_value"

	return (state, infotext,[("dl_rssi", dl_rssi,warn,crit)])

check_info["rad5k_dl_rssi"] = {
    'check_function': check_rad5k_dl_rssi,
    'service_description': 'rad5k_dl_rssi',
    'has_perfdata': True,
}

#########################################################################
#       SNMP OID for the downlink rssi
#########################################################################
snmp_info["rad5k_dl_rssi"] = (  ".1.3.6.1.4.1.4458.1000.1.1", ["29.0"] )


