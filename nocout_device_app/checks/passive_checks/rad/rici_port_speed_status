#!/usr/bin/python

import sys
import socket
import json
import os


"""
operating Frequency of ss device  Poller script.

This is part of device application. 
Poller script determines the operating ptx of device. 
poller script takes the snmp value of OID .1.3.6.1.4.1.161.19.3.1.1.2.0 from snmp agent of device at specific interval.
Device on which Frequency operating is sent to device application 

"""
# ######################################################################
# Function: check_rici_port_speed_status
#
# Parameters: info (SNMP Ouput) _no_params (No Parameters)
#
# Output: service state ,plugin output
# ######################################################################


def extract_port_speed_status_from_live(hostname):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.
    
        """
	port_speed_list = []
        query_string = "GET services\nColumns: plugin_output\nFilter: " + \
			"service_description = %s\nFilter: host_name = %s\nOutputFormat: python\n" % ("rici_port_values",hostname)
       
	try: 
		s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        	s.connect(livestatus_unix_socket)
		s.send(query_string)
		s.shutdown(socket.SHUT_WR)
		query_output = s.recv(100000000)
		query_output.strip("\n")
		query_output = eval(query_output)
	except:
		port_speed_list = []
		return port_speed_list
	if query_output:
		try:
			query_output = [str(entry) for entry in query_output[0][0].split(' - ')[1].split()]
			port_speed_list=map(lambda x: x.split('=')[1].split(',')[1],query_output)
		except:
			port_speed_list = []
	return port_speed_list

                                

def check_rici_port_speed_status(item, _no_params, info):
    """
            check_rici_port_speed_status function calcdlates the operating ptx

            Args:
                    item (str) Specific item on SNMP output on which we want to filter resdlts

            Kwargs:
                    params (tuple) Check parameters for critical and warning state of service

            Returns:
                    state (int) :
                                    0 : OK
                                    1 : Warning
                                    2: Critical
                3: unknown
                    infotext(string):
                                    plugin output
                                    Example : OK - 5835

                    Raises:
                            ValueError ,Exception
    """
    state = 3
    infotext = "unknown_value"
    status_list = []
    port_string = "fe_"
    try:
	infotext = ""	
	speed_list =extract_port_speed_status_from_live(g_hostname)
	if speed_list:
		for index in range(len(speed_list)):
			status_list.append((port_string + str(index + 1)+"_state",speed_list[index]))
			infotext += "%s=%s " % (port_string + str(index + 1) +"_state",speed_list[index])
		state = 0
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value"

    return (state, infotext,status_list)


check_info["rici_port_speed_status"] = {
    'check_function': check_rici_port_speed_status,
    'service_description': 'rici_port_speed_status',
    'has_perfdata' : True,
    'snmp_info': ( ".1.3.6.1.2.1.2.2.1.8", ["21","22","23","24","25","26","27","28"] ),
}

#########################################################################
#	SNMP OID for the operating ptx
#########################################################################

