#!/usr/bin/python
import re
import time
from operator import itemgetter
import memcache
from mysql_connection import memc
"""
uplink utilizationPoller script.

This is part of device application. 
Poller script determines the port current downlink utilization in terms of number of octets in downlink direction.
poller script takes the snmp value of OID .1.3.6.1.2.1.2.2.1.16 from snmp agent of device at specific interval.
Total Downlink utilization is sent to device application 

"""
# #######################################################################
# Function : check_switch_dl_utilization
#
# Parameters: info (SNMP otuput ,_no_params (NO parameters))
#
# Output: service state,plugin output and performance data
# #######################################################################


def juniper_check_switch_dl_utilization(item, _no_params, info):
    """
                check_switch_dl_utilization function calculates the downlink utilization

                Args:
                        item (str) Specific item on SNMP output on which we want to filter results
                
                Kwargs:
                        params (tuple) Check parameters for critical and warning state of service

                Returns:
                        state (int) :
                                        0 : OK
                                        1 : Warning
                                        2: Critical
                    3: unknown
                        infotext(string):
                                        plugin output
                                        Example : OK - [Management_Port_on_Odu] ul_utilization:2994339289

                        performance_data  (list):
                                        performance data
                                        Example: Management_Port_on_Odu=2994339289;;;; Radio_Interface=;;;;
                        Raises:
                                ValueError ,Exception
    """
    #try:
    #    memc1 = memcache.Client(['10.133.12.163:11211','10.133.19.165:11211'], debug=1)
    #except:
    #    memc1 =None
    key = "master_ua" + "_switch"  # key of memcache configured ports
    memcache_switch = memc.get(key) #dictionary contain hostname as key and port as value
    host_name = str(g_hostname) 
     
    try :
       conf_port =  memcache_switch.get(host_name,"") #conf_port contain back_hual configured port like  ge-0_0_1
    except:
       conf_port = ""
    
    conf_port = conf_port.replace("_","/")  # change _ with / to match the info part
    conf_port_list = conf_port.split(",") # for ring case
    state = 3
    rate = None
    link_out_octets = None
    wrapped = False
    infotext = "unknown_value"
    status_list = []
    #port_string1 = conf_port.replace("/","_") # conversion of / with _ to display
    #port_string2 ="ge-0_1_"
    try:
	if info:
		infotext = "dl_utilization:["
		this_time = int(time.time())
		infotext += "time=%s " % this_time
        	for index in xrange(len(info[0])):
			if info[0][index][0] in conf_port_list:
				#link_out_octets = int(info[1][index][0]) 	#got corresponding value of index
				rate = int(info[1][index][0])       #got corresponding value of index
				if rate ==0:
					port_string1 = info[0][index][0].replace("/","_")
				else :
					rate = rate /(1024.0 * 1024)
					port_string1 = info[0][index][0].replace("/","_")
				
				#this_time = int(time.time())
				#try:
					#timedif, rate = get_counter("switch_dl_utilization_%s" % (port_string1),this_time, saveint(link_out_octets))
					#rate = (rate * 8)/(1024.0 * 1024)
    				state = 0
				#except MKCounterWrapped:
				#	wrapped=True
                		status_list.append((port_string1,"%.2f" % rate))
                		infotext += "%s=%s " % (port_string1,rate)
                key1 = str(g_hostname)+"juniper_switch_dl_utilization"
                memc.set(key1,status_list)
		infotext +="]"

    except ValueError:
        infotext = "type_mismatch_error"
    except:
	infotext = "unknown_value"
    if wrapped:
        infotext = "Counter wrapped"
    return (state, infotext, status_list)


check_info["juniper_switch_dl_utilization"] = {
    'check_function': juniper_check_switch_dl_utilization,
    'service_description': 'juniper_switch_dl_utilization',
    'has_perfdata': True,
}

##############################################################################
#SNMP OID for the Downlink utilization
##############################################################################


snmp_info["juniper_switch_dl_utilization"] = [( ".1.3.6.1.2.1.2.2.1",["2"]), ( ".1.3.6.1.4.1.2636.3.3.1.1", ["4"] )]
