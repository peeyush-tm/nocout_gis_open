#!/usr/bin/python
import re
import time
from operator import itemgetter
import memcache
from mysql_connection import memc
"""
uplink utilizationPoller script.

This is part of device application. 
Poller script determines the port current uplink utilization in terms of number of octets in downlink direction.
poller script takes the snmp value of OID .1.3.6.1.2.1.2.2.1.16 from snmp agent of device at specific interval.
Total Downlink utilization is sent to device application 

"""
# #######################################################################
# Function : check_switch_ul_utilization
#
# Parameters: info (SNMP otuput ,_no_params (NO parameters))
#
# Output: service state,plugin output and performance data
# #######################################################################


def huawei_check_switch_ul_utilization(item, _no_params, info):
    """
                check_switch_ul_utilization function calculates the downlink utilization

                Args:
                        item (str) Specific item on SNMP output on which we want to filter results
                
                Kwargs:
                        params (tuple) Check parameters for critical and warning state of service

                Returns:
                        state (int) :
                                        0 : OK
                                        1 : Warning
                                        2: Critical
                    3: unknown
                        infotext(string):
                                        plugin output
                                        Example : OK - [Management_Port_on_Odu] ul_utilization:2994339289

                        performance_data  (list):
                                        performance data
                                        Example: Management_Port_on_Odu=2994339289;;;; Radio_Interface=;;;;
                        Raises:
                                ValueError ,Exception
    """
    #try:
    #    memc1 = memcache.Client(['10.133.19.165:11211','10.133.12.163:11211'], debug=1)
    #except:
    #    memc1 =None
    key = "master_ua" + "_switch"  # key of memcache configured ports
    memcache_switch= memc.get(key)
    #print memcache_switch
    #memcache_switch = memc1.get(key) #dictionary contain hostname as key and port as value
    #print memcache_switch
    host_name = str(g_hostname) 
    try :
       conf_port =  memcache_switch.get(host_name,"") #conf_port contain back_hual configured port like  ge-0_0_1
    except:
       conf_port = ""
    conf_port
    conf_port_list1 = conf_port.split(",") # list contain the configured ports
    conf_port_list =[] # will contain the port in formate FastEthernet0/1
    g_port = 'GigabitEthernet0/0/'
    for each in conf_port_list1:
	if 'gi' in each.lower():
            port = each.rsplit("_",1)
            port_name = g_port+port[1]
            conf_port_list.append(port_name)

    state = 3
    rate = None
    link_out_octets = None
    wrapped = False
    infotext = "unknown_value"
    status_list = []
    #port_string = "fa0_"
    #port_string2 ="gi0_"
    try:
	if info:
		infotext = "ul_utilization:["
		this_time = int(time.time())
		infotext += "time=%s " % this_time
        	for index in xrange(len(info[0])):
			if info[0][index][0] in conf_port_list:    
				link_out_octets = int(info[1][index][0]) 	#got corresponding value of index
				port = info[0][index][0]  # contain string like FastEthernet0/1
				port_string1= port.replace("/","_") # change again FastEthernet formate to 

				this_time = int(time.time())
				try:
					timedif, rate = get_counter("switch_ul_utilization_%s" % (port_string1),this_time, saveint(link_out_octets))
					rate = (rate * 8)/(1024.0 * 1024)
    					state = 0
				except MKCounterWrapped:
					wrapped=True
                		status_list.append((port_string1,"%.2f" % rate))
                		infotext += "%s=%s " % (port_string1,link_out_octets)                				

                key1 = str(g_hostname)+"switch_ul_utilization"  # save value for KPI checks in memcache
                memc.delete(key1)
                memc.set(key1,status_list) # saving the status list in memcache
		infotext += "]"
    except ValueError:
        infotext = "type_mismatch_error"
    except:
	infotext = "unknown_value"
    if wrapped:
        infotext = "Counter wrapped"
    return (state, infotext, status_list)


check_info["huawei_switch_ul_utilization"] = {
    'check_function': huawei_check_switch_ul_utilization,
    'service_description': 'huawei_switch_ul_utilization',
    'has_perfdata': True,
}

##############################################################################
#SNMP OID for the Downlink utilization
##############################################################################


snmp_info["huawei_switch_ul_utilization"] = [( ".1.3.6.1.2.1.2.2.1",["2"]),( ".1.3.6.1.2.1.2.2.1", ["10"] )]
