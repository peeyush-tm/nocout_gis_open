#!/usr/bin/python
import binascii
import sys
from telnetlib import Telnet
import socket
import json
import os
import mysql.connector
try:
    import nocout_settings
    from nocout_settings import _DATABASES, _LIVESTATUS
except Exception as exp:
    print exp
"""
try:
    from mysql_connection import memc
except Exception,e:
    print e
    pass
service on SS,which calculates the ss mac.

This is part of device application. 
Poller script determines the ss ip. 
poller script takes the snmp value of OID  1.3.6.1.4.1.161.19.3.3.1.13.0 from snmp agent of device at specific interval.
SS mac information is sent to device application 

"""
# ######################################################################
# Function : check_cambium_ss_mac_invent
#
# Parameters: info (SNMP Output) _no_params(No Parameters)
#
# Output: service state and plugin output
# #####################################################################


def mysql_conn():
        db = None
        try:
            db = mysql.connector.connect(
			user=_DATABASES['user'],
                        host=_DATABASES['host'],
                        password=_DATABASES['password'],
                        database=_DATABASES['database'],
                        port=_DATABASES['port']
                        )
        except Exception as exp:
            print exp
        return db




def check_cambium_rereg_count(item, params, info):
    """
                check_cambium_ss_mac_invent function calculates the mac of ss

                Args:
                        item (str) Specific item on SNMP output on which we want to filter results
                
                Kwargs:
                        params (tuple) Check parameters for critical and warning state of service

                Returns:
                        state (int) :
                                        0 : OK
                                        1 : Warning
                                        2: Critical
                    3: unknown
                        infotext(string):
                                        plugin output
                                        Example : OK - BB1202020

                        Raises:
                               Exception
    """
    state = 3
    rereg_count = None
    infotext = "unknown_value"
    warn,crit = params
    this_time = datetime.now()
    t_stmp = this_time + timedelta(minutes=-(this_time.minute % 5))
    t_stmp = t_stmp.replace(second=0,microsecond=0)
    current_time =int(time.mktime(t_stmp.timetuple()))
    state_string = ""
    try:
        if info:
            if info[0][0]:
                ss_mac = info[0][0]
		a=binascii.b2a_hex(ss_mac)
                n = 2
                ss_mac=(':').join([a[i:i+2] for i in range(0, len(a), n)])
		if ss_mac:
			try:
				if memc:
					ss_list=memc.get(ss_mac)
					if ss_list:
						rereg_count = int(ss_list[5])
			except:
				pass
			if rereg_count != None:
				if rereg_count > crit:
					state  = 2
					state_string = "critical"
				elif rereg_count <= crit and rereg_count >= warn:
					state = 1
					state_string = "warning"
				else:
					state = 0
					state_string = "ok"
				try:
					if memc:
						key1 = str(g_hostname) + "_rereg_count" + "_" + str(current_time)
						memc.set(key1,rereg_count,600)
						value_list= []
						key = g_hostname + "_rereg_count_sev"
						value = memc.get(key)
						if value and type(value) is list and len(value) == 1:
							value_list.append(value[0])	
							value_list.append(state_string)	
						elif value and type(value) is list and len(value) == 2:
							value_list.append(value[1])
							value_list.append(state_string)
						elif not value:
							value_list.append(state_string)
						memc.set(key,value_list,360)
				except:
					pass
	infotext = "Device rereg_count is %s " % rereg_count
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value"
    return (state, infotext, [("rereg_count", rereg_count, warn, crit)])


check_info["cambium_rereg_count"] = {
    'check_function': check_cambium_rereg_count,
    'service_description': 'cambium_rereg_count',
    'has_perfdata': True,
}

#################################################################
#SNMP OID value for poller script
################################################################

snmp_info["cambium_rereg_count"] = ( ".1.3.6.1.2.1.2.2.1", ["6.1"] )
