#!/usr/bin/python
import binascii
import sys
from telnetlib import Telnet
import socket
import json
import os
import mysql.connector

from mysql_connection import db
try:
    import nocout_settings
    from nocout_settings import _DATABASES, _LIVESTATUS
except Exception as exp:
    print exp

"""
service on SS,which calculates the ss mac.

This is part of device application. 
Poller script determines the ss ip. 
poller script takes the snmp value of OID  1.3.6.1.4.1.161.19.3.3.1.13.0 from snmp agent of device at specific interval.
SS mac information is sent to device application 

"""
# ######################################################################
# Function : check_cambium_ss_mac_invent
#
# Parameters: info (SNMP Output) _no_params(No Parameters)
#
# Output: service state and plugin output
# #####################################################################


def live_query_ul_jitter(mac):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.
    
        """
        ul_jitter = None
	ss_params= None
	if memc:
		value_list = memc.get(mac)
		if value_list:
			try:
				ul_jitter = int(value_list[3])
			except:
				ul_jitter = None
		if not ul_jitter:
			try:
				key1 = mac + "_topology"
				ss_params = memc.get(key1)
			except:
				pass
	if not ul_jitter:
		if not ss_params: 
        	    host_name = extract_host_from_cambium_topology(mac)
		    try:
			bs_hostname = host_name[0][0]
			bs_site = host_name[0][1]
		    except:
			bs_hostname = None
		    if memc:
			if bs_hostname:
			    try:
				arg_list = []
				arg_list.append(bs_hostname)
				arg_list.append(bs_site)
				key = mac + "_topology"
				memc.set(key,arg_list,360)
			    except:
				pass
		else:
		    bs_hostname = ss_params[0]
		    bs_site = ss_params[1]
        	try:
                    if bs_hostname:
			query_string = "GET services\nColumns: plugin_output\nFilter: " + \
				"service_description = %s\nFilter: host_name = %s\nOutputFormat: json\n" % ("cambium_topology_discover",bs_hostname)
			site = bs_site
			machine_name = site.split('_')[0]
			socket_ip = _LIVESTATUS[machine_name]['host']
			socket_port = _LIVESTATUS[machine_name][site]['port']
			query_output = json.loads(get_from_socket(socket_ip,int(socket_port),query_string,site,machine_name).strip())
			if query_output[0][0]:
				plugin_output = str(query_output[0][0].split('- ')[1])
				plugin_output = [entry for entry in plugin_output.split(' ')]
				ss_params = filter(lambda x: '/' in x,plugin_output)
				ss_matched_params = filter(lambda x: mac in x,ss_params)
				ul_jitter= map(lambda x: x.split('/')[3],ss_matched_params)
				if ((ul_jitter != 'None') and  (ul_jitter != None)):
                                	ul_jitter= int(ul_jitter[0])
        	except:
			ul_jitter= None	
	return ul_jitter	



def check_cambium_ul_jitter(item, params, info):
    """
                check_cambium_ss_mac_invent function calculates the mac of ss

                Args:
                        item (str) Specific item on SNMP output on which we want to filter results
                
                Kwargs:
                        params (tuple) Check parameters for critical and warning state of service

                Returns:
                        state (int) :
                                        0 : OK
                                        1 : Warning
                                        2: Critical
                    3: unknown
                        infotext(string):
                                        plugin output
                                        Example : OK - BB1202020

                        Raises:
                               Exception
    """
    state = 3
    ul_jitter = None
    infotext = "unknown_value"
    warn,crit = params
    this_time = datetime.now()
    t_stmp = this_time + timedelta(minutes=-(this_time.minute % 5))
    t_stmp = t_stmp.replace(second=0,microsecond=0)
    current_time =int(time.mktime(t_stmp.timetuple()))
    state_string = ""
    try:
        if info:
            if info[0][0]:
                ss_mac = info[0][0]
		a=binascii.b2a_hex(ss_mac)
                n = 2
                ss_mac=(':').join([a[i:i+2] for i in range(0, len(a), n)])
		ul_jitter = live_query_ul_jitter(ss_mac )
		if ul_jitter != None:
			if ul_jitter > crit:
				state  = 2
				state_string = "critical"
			elif ul_jitter <= crit and ul_jitter >= warn:
				state = 1
				state_string = "warning"
			else:
				state = 0
				state_string = "ok"
			try:
				if memc:
					value_list = []
					key1 = str(g_hostname) + "_ul_jitter" + "_" + str(current_time)
					memc.set(key1,ul_jitter,600)
					key = g_hostname + "_ul_jitter_sev"
					value = memc.get(key)
					if value and type(value) is list and len(value) == 1:
						value_list.append(value[0])	
						value_list.append(state_string)	
					elif value and type(value) is list and len(value) == 2:
						value_list.append(value[1])
						value_list.append(state_string)
					elif not value:
						value_list.append(state_string)
					memc.set(key,value_list,360)
			except:
				pass
	infotext = "Device uplink jitter is %s " % ul_jitter
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value"
    return (state, infotext, [("ul_jitter", ul_jitter, warn, crit)])


check_info["cambium_ul_jitter"] = {
    'check_function': check_cambium_ul_jitter,
    'service_description': 'cambium_ul_jitter',
    'has_perfdata': True,
}

#################################################################
#SNMP OID value for poller script
################################################################

snmp_info["cambium_ul_jitter"] = ( ".1.3.6.1.2.1.2.2.1", ["6.1"] )
