#!/usr/bin/python
import binascii
import sys
from telnetlib import Telnet
import socket
import json
import os
import mysql.connector
"""
service on SS,which calculates the ss mac.

This is part of device application. 
Poller script determines the ss ip. 
poller script takes the snmp value of OID  1.3.6.1.4.1.161.19.3.3.1.13.0 from snmp agent of device at specific interval.
SS mac information is sent to device application 

"""
# ######################################################################
# Function : check_cambium_ss_mac_invent
#
# Parameters: info (SNMP Output) _no_params(No Parameters)
#
# Output: service state and plugin output
# #####################################################################


def live_query_ss_sector_id(mac):
        """
        Connects to a socket, checks for the WELCOME-MSG and closes the
        connection.
        Returns nothing.
    
        """

        exit_value = 3
        ss_sector_id = None
        if memc:
            try :
                value_list = memc.get(mac)
                ss_sector_id= value_list[6]
            except :
                ss_sector_id= None
        if not ss_sector_id  :

            host_name = extract_host_from_cambium_topology(mac)
            try:
                if host_name[0][0]:
                        query_string = "GET services\nColumns: plugin_output\nFilter: " + \
                                "service_description = %s\nFilter: host_name = %s\nOutputFormat: json\n" % ("cambium_topology_discover",host_name[0][0])
			site = host_name[0][1]
			machine_name = host_name[0][1].split('_')[0]
			socket_ip = _LIVESTATUS[machine_name]['host']
			socket_port = _LIVESTATUS[machine_name][site]['port']
                        query_output = json.loads(get_from_socket(socket_ip,int(socket_port),query_string,site,machine_name).strip())
                        if query_output[0][0]:
                                plugin_output = str(query_output[0][0].split('- ')[1])
                                plugin_output = [entry for entry in plugin_output.split(' ')]
                                ss_sector_id= plugin_output[1]
					
            except:
		ss_sector_id= None	
	return ss_sector_id	



def check_cambium_ss_sector_id_invent(item, _no_params, info):
    """
                check_cambium_ss_mac_invent function calculates the mac of ss

                Args:
                        item (str) Specific item on SNMP output on which we want to filter results
                
                Kwargs:
                        params (tuple) Check parameters for critical and warning state of service

                Returns:
                        state (int) :
                                        0 : OK
                                        1 : Warning
                                        2: Critical
                    3: unknown
                        infotext(string):
                                        plugin output
                                        Example : OK - BB1202020

                        Raises:
                               Exception
    """
    state = 3
    ss_sector_id = None
    infotext = "unknown_value"
    try:
        if info:
            if info[0][0]:
                ss_mac = info[0][0]
		a=binascii.b2a_hex(ss_mac)
                n = 2
                ss_mac=(':').join([a[i:i+2] for i in range(0, len(a), n)])
		if ss_mac:
			ss_sector_id = live_query_ss_sector_id(ss_mac )
			infotext = "%s " % ss_sector_id
			state = 0
    except ValueError:
        infotext = "type_mismatch_value"
    except:
        infotext = "unknown_value"
    return (state, infotext)


check_info["cambium_ss_sector_id_invent"] = {
    'check_function': check_cambium_ss_sector_id_invent,
    'service_description': 'cambium_ss_sector_id_invent',
}

#################################################################
#SNMP OID value for poller script
################################################################

snmp_info["cambium_ss_sector_id_invent"] = ( ".1.3.6.1.2.1.2.2.1", ["6.1"] )
